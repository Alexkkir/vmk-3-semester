#include "metric.h"
#include <cmath>

//#define my_abs(v)   (((v) + ((v) >> (sizeof(int) * 8 - 1))) ^ ((v) >> (sizeof(int) * 8 - 1)))
//#define my_abs_2(v)     (v) * (((v) > 0) * 2 - 1)
#define pow_2(v)    ((v) * (v))


int GetErrorSAD(const unsigned char* block1, const unsigned char *block2, const int stride, const int block_size) {
    int sum = 0;
    for (int i = 0; i < block_size; ++i) {
        for (int j = 0; j < block_size; ++j) {
            sum += abs(int(block1[i * stride + j]) - int(block2[i * stride + j]));
        }
    }
    return sum;
}

int GetErrorSAD_16x16(const unsigned char* block1, const unsigned char *block2, const int stride)
{
    return GetErrorSAD(block1, block2, stride, 16);
}

int GetErrorSAD_8x8(const unsigned char* block1, const  unsigned char *block2, const int stride)
{
    return GetErrorSAD(block1, block2, stride, 8);
}


int GetErrorSAD_16x16_my(const unsigned char *block1, const unsigned char *block2, const int stride) {
    int sum = 0;
    sum += pow_2(int(block1[0 * stride + 0]) - int(block2[0 * stride + 0]));
    sum += pow_2(int(block1[0 * stride + 1]) - int(block2[0 * stride + 1]));
    sum += pow_2(int(block1[0 * stride + 2]) - int(block2[0 * stride + 2]));
    sum += pow_2(int(block1[0 * stride + 3]) - int(block2[0 * stride + 3]));
    sum += pow_2(int(block1[0 * stride + 4]) - int(block2[0 * stride + 4]));
    sum += pow_2(int(block1[0 * stride + 5]) - int(block2[0 * stride + 5]));
    sum += pow_2(int(block1[0 * stride + 6]) - int(block2[0 * stride + 6]));
    sum += pow_2(int(block1[0 * stride + 7]) - int(block2[0 * stride + 7]));
    sum += pow_2(int(block1[0 * stride + 8]) - int(block2[0 * stride + 8]));
    sum += pow_2(int(block1[0 * stride + 9]) - int(block2[0 * stride + 9]));
    sum += pow_2(int(block1[0 * stride + 10]) - int(block2[0 * stride + 10]));
    sum += pow_2(int(block1[0 * stride + 11]) - int(block2[0 * stride + 11]));
    sum += pow_2(int(block1[0 * stride + 12]) - int(block2[0 * stride + 12]));
    sum += pow_2(int(block1[0 * stride + 13]) - int(block2[0 * stride + 13]));
    sum += pow_2(int(block1[0 * stride + 14]) - int(block2[0 * stride + 14]));
    sum += pow_2(int(block1[0 * stride + 15]) - int(block2[0 * stride + 15]));
    sum += pow_2(int(block1[1 * stride + 0]) - int(block2[1 * stride + 0]));
    sum += pow_2(int(block1[1 * stride + 1]) - int(block2[1 * stride + 1]));
    sum += pow_2(int(block1[1 * stride + 2]) - int(block2[1 * stride + 2]));
    sum += pow_2(int(block1[1 * stride + 3]) - int(block2[1 * stride + 3]));
    sum += pow_2(int(block1[1 * stride + 4]) - int(block2[1 * stride + 4]));
    sum += pow_2(int(block1[1 * stride + 5]) - int(block2[1 * stride + 5]));
    sum += pow_2(int(block1[1 * stride + 6]) - int(block2[1 * stride + 6]));
    sum += pow_2(int(block1[1 * stride + 7]) - int(block2[1 * stride + 7]));
    sum += pow_2(int(block1[1 * stride + 8]) - int(block2[1 * stride + 8]));
    sum += pow_2(int(block1[1 * stride + 9]) - int(block2[1 * stride + 9]));
    sum += pow_2(int(block1[1 * stride + 10]) - int(block2[1 * stride + 10]));
    sum += pow_2(int(block1[1 * stride + 11]) - int(block2[1 * stride + 11]));
    sum += pow_2(int(block1[1 * stride + 12]) - int(block2[1 * stride + 12]));
    sum += pow_2(int(block1[1 * stride + 13]) - int(block2[1 * stride + 13]));
    sum += pow_2(int(block1[1 * stride + 14]) - int(block2[1 * stride + 14]));
    sum += pow_2(int(block1[1 * stride + 15]) - int(block2[1 * stride + 15]));
    sum += pow_2(int(block1[2 * stride + 0]) - int(block2[2 * stride + 0]));
    sum += pow_2(int(block1[2 * stride + 1]) - int(block2[2 * stride + 1]));
    sum += pow_2(int(block1[2 * stride + 2]) - int(block2[2 * stride + 2]));
    sum += pow_2(int(block1[2 * stride + 3]) - int(block2[2 * stride + 3]));
    sum += pow_2(int(block1[2 * stride + 4]) - int(block2[2 * stride + 4]));
    sum += pow_2(int(block1[2 * stride + 5]) - int(block2[2 * stride + 5]));
    sum += pow_2(int(block1[2 * stride + 6]) - int(block2[2 * stride + 6]));
    sum += pow_2(int(block1[2 * stride + 7]) - int(block2[2 * stride + 7]));
    sum += pow_2(int(block1[2 * stride + 8]) - int(block2[2 * stride + 8]));
    sum += pow_2(int(block1[2 * stride + 9]) - int(block2[2 * stride + 9]));
    sum += pow_2(int(block1[2 * stride + 10]) - int(block2[2 * stride + 10]));
    sum += pow_2(int(block1[2 * stride + 11]) - int(block2[2 * stride + 11]));
    sum += pow_2(int(block1[2 * stride + 12]) - int(block2[2 * stride + 12]));
    sum += pow_2(int(block1[2 * stride + 13]) - int(block2[2 * stride + 13]));
    sum += pow_2(int(block1[2 * stride + 14]) - int(block2[2 * stride + 14]));
    sum += pow_2(int(block1[2 * stride + 15]) - int(block2[2 * stride + 15]));
    sum += pow_2(int(block1[3 * stride + 0]) - int(block2[3 * stride + 0]));
    sum += pow_2(int(block1[3 * stride + 1]) - int(block2[3 * stride + 1]));
    sum += pow_2(int(block1[3 * stride + 2]) - int(block2[3 * stride + 2]));
    sum += pow_2(int(block1[3 * stride + 3]) - int(block2[3 * stride + 3]));
    sum += pow_2(int(block1[3 * stride + 4]) - int(block2[3 * stride + 4]));
    sum += pow_2(int(block1[3 * stride + 5]) - int(block2[3 * stride + 5]));
    sum += pow_2(int(block1[3 * stride + 6]) - int(block2[3 * stride + 6]));
    sum += pow_2(int(block1[3 * stride + 7]) - int(block2[3 * stride + 7]));
    sum += pow_2(int(block1[3 * stride + 8]) - int(block2[3 * stride + 8]));
    sum += pow_2(int(block1[3 * stride + 9]) - int(block2[3 * stride + 9]));
    sum += pow_2(int(block1[3 * stride + 10]) - int(block2[3 * stride + 10]));
    sum += pow_2(int(block1[3 * stride + 11]) - int(block2[3 * stride + 11]));
    sum += pow_2(int(block1[3 * stride + 12]) - int(block2[3 * stride + 12]));
    sum += pow_2(int(block1[3 * stride + 13]) - int(block2[3 * stride + 13]));
    sum += pow_2(int(block1[3 * stride + 14]) - int(block2[3 * stride + 14]));
    sum += pow_2(int(block1[3 * stride + 15]) - int(block2[3 * stride + 15]));
    sum += pow_2(int(block1[4 * stride + 0]) - int(block2[4 * stride + 0]));
    sum += pow_2(int(block1[4 * stride + 1]) - int(block2[4 * stride + 1]));
    sum += pow_2(int(block1[4 * stride + 2]) - int(block2[4 * stride + 2]));
    sum += pow_2(int(block1[4 * stride + 3]) - int(block2[4 * stride + 3]));
    sum += pow_2(int(block1[4 * stride + 4]) - int(block2[4 * stride + 4]));
    sum += pow_2(int(block1[4 * stride + 5]) - int(block2[4 * stride + 5]));
    sum += pow_2(int(block1[4 * stride + 6]) - int(block2[4 * stride + 6]));
    sum += pow_2(int(block1[4 * stride + 7]) - int(block2[4 * stride + 7]));
    sum += pow_2(int(block1[4 * stride + 8]) - int(block2[4 * stride + 8]));
    sum += pow_2(int(block1[4 * stride + 9]) - int(block2[4 * stride + 9]));
    sum += pow_2(int(block1[4 * stride + 10]) - int(block2[4 * stride + 10]));
    sum += pow_2(int(block1[4 * stride + 11]) - int(block2[4 * stride + 11]));
    sum += pow_2(int(block1[4 * stride + 12]) - int(block2[4 * stride + 12]));
    sum += pow_2(int(block1[4 * stride + 13]) - int(block2[4 * stride + 13]));
    sum += pow_2(int(block1[4 * stride + 14]) - int(block2[4 * stride + 14]));
    sum += pow_2(int(block1[4 * stride + 15]) - int(block2[4 * stride + 15]));
    sum += pow_2(int(block1[5 * stride + 0]) - int(block2[5 * stride + 0]));
    sum += pow_2(int(block1[5 * stride + 1]) - int(block2[5 * stride + 1]));
    sum += pow_2(int(block1[5 * stride + 2]) - int(block2[5 * stride + 2]));
    sum += pow_2(int(block1[5 * stride + 3]) - int(block2[5 * stride + 3]));
    sum += pow_2(int(block1[5 * stride + 4]) - int(block2[5 * stride + 4]));
    sum += pow_2(int(block1[5 * stride + 5]) - int(block2[5 * stride + 5]));
    sum += pow_2(int(block1[5 * stride + 6]) - int(block2[5 * stride + 6]));
    sum += pow_2(int(block1[5 * stride + 7]) - int(block2[5 * stride + 7]));
    sum += pow_2(int(block1[5 * stride + 8]) - int(block2[5 * stride + 8]));
    sum += pow_2(int(block1[5 * stride + 9]) - int(block2[5 * stride + 9]));
    sum += pow_2(int(block1[5 * stride + 10]) - int(block2[5 * stride + 10]));
    sum += pow_2(int(block1[5 * stride + 11]) - int(block2[5 * stride + 11]));
    sum += pow_2(int(block1[5 * stride + 12]) - int(block2[5 * stride + 12]));
    sum += pow_2(int(block1[5 * stride + 13]) - int(block2[5 * stride + 13]));
    sum += pow_2(int(block1[5 * stride + 14]) - int(block2[5 * stride + 14]));
    sum += pow_2(int(block1[5 * stride + 15]) - int(block2[5 * stride + 15]));
    sum += pow_2(int(block1[6 * stride + 0]) - int(block2[6 * stride + 0]));
    sum += pow_2(int(block1[6 * stride + 1]) - int(block2[6 * stride + 1]));
    sum += pow_2(int(block1[6 * stride + 2]) - int(block2[6 * stride + 2]));
    sum += pow_2(int(block1[6 * stride + 3]) - int(block2[6 * stride + 3]));
    sum += pow_2(int(block1[6 * stride + 4]) - int(block2[6 * stride + 4]));
    sum += pow_2(int(block1[6 * stride + 5]) - int(block2[6 * stride + 5]));
    sum += pow_2(int(block1[6 * stride + 6]) - int(block2[6 * stride + 6]));
    sum += pow_2(int(block1[6 * stride + 7]) - int(block2[6 * stride + 7]));
    sum += pow_2(int(block1[6 * stride + 8]) - int(block2[6 * stride + 8]));
    sum += pow_2(int(block1[6 * stride + 9]) - int(block2[6 * stride + 9]));
    sum += pow_2(int(block1[6 * stride + 10]) - int(block2[6 * stride + 10]));
    sum += pow_2(int(block1[6 * stride + 11]) - int(block2[6 * stride + 11]));
    sum += pow_2(int(block1[6 * stride + 12]) - int(block2[6 * stride + 12]));
    sum += pow_2(int(block1[6 * stride + 13]) - int(block2[6 * stride + 13]));
    sum += pow_2(int(block1[6 * stride + 14]) - int(block2[6 * stride + 14]));
    sum += pow_2(int(block1[6 * stride + 15]) - int(block2[6 * stride + 15]));
    sum += pow_2(int(block1[7 * stride + 0]) - int(block2[7 * stride + 0]));
    sum += pow_2(int(block1[7 * stride + 1]) - int(block2[7 * stride + 1]));
    sum += pow_2(int(block1[7 * stride + 2]) - int(block2[7 * stride + 2]));
    sum += pow_2(int(block1[7 * stride + 3]) - int(block2[7 * stride + 3]));
    sum += pow_2(int(block1[7 * stride + 4]) - int(block2[7 * stride + 4]));
    sum += pow_2(int(block1[7 * stride + 5]) - int(block2[7 * stride + 5]));
    sum += pow_2(int(block1[7 * stride + 6]) - int(block2[7 * stride + 6]));
    sum += pow_2(int(block1[7 * stride + 7]) - int(block2[7 * stride + 7]));
    sum += pow_2(int(block1[7 * stride + 8]) - int(block2[7 * stride + 8]));
    sum += pow_2(int(block1[7 * stride + 9]) - int(block2[7 * stride + 9]));
    sum += pow_2(int(block1[7 * stride + 10]) - int(block2[7 * stride + 10]));
    sum += pow_2(int(block1[7 * stride + 11]) - int(block2[7 * stride + 11]));
    sum += pow_2(int(block1[7 * stride + 12]) - int(block2[7 * stride + 12]));
    sum += pow_2(int(block1[7 * stride + 13]) - int(block2[7 * stride + 13]));
    sum += pow_2(int(block1[7 * stride + 14]) - int(block2[7 * stride + 14]));
    sum += pow_2(int(block1[7 * stride + 15]) - int(block2[7 * stride + 15]));
    sum += pow_2(int(block1[8 * stride + 0]) - int(block2[8 * stride + 0]));
    sum += pow_2(int(block1[8 * stride + 1]) - int(block2[8 * stride + 1]));
    sum += pow_2(int(block1[8 * stride + 2]) - int(block2[8 * stride + 2]));
    sum += pow_2(int(block1[8 * stride + 3]) - int(block2[8 * stride + 3]));
    sum += pow_2(int(block1[8 * stride + 4]) - int(block2[8 * stride + 4]));
    sum += pow_2(int(block1[8 * stride + 5]) - int(block2[8 * stride + 5]));
    sum += pow_2(int(block1[8 * stride + 6]) - int(block2[8 * stride + 6]));
    sum += pow_2(int(block1[8 * stride + 7]) - int(block2[8 * stride + 7]));
    sum += pow_2(int(block1[8 * stride + 8]) - int(block2[8 * stride + 8]));
    sum += pow_2(int(block1[8 * stride + 9]) - int(block2[8 * stride + 9]));
    sum += pow_2(int(block1[8 * stride + 10]) - int(block2[8 * stride + 10]));
    sum += pow_2(int(block1[8 * stride + 11]) - int(block2[8 * stride + 11]));
    sum += pow_2(int(block1[8 * stride + 12]) - int(block2[8 * stride + 12]));
    sum += pow_2(int(block1[8 * stride + 13]) - int(block2[8 * stride + 13]));
    sum += pow_2(int(block1[8 * stride + 14]) - int(block2[8 * stride + 14]));
    sum += pow_2(int(block1[8 * stride + 15]) - int(block2[8 * stride + 15]));
    sum += pow_2(int(block1[9 * stride + 0]) - int(block2[9 * stride + 0]));
    sum += pow_2(int(block1[9 * stride + 1]) - int(block2[9 * stride + 1]));
    sum += pow_2(int(block1[9 * stride + 2]) - int(block2[9 * stride + 2]));
    sum += pow_2(int(block1[9 * stride + 3]) - int(block2[9 * stride + 3]));
    sum += pow_2(int(block1[9 * stride + 4]) - int(block2[9 * stride + 4]));
    sum += pow_2(int(block1[9 * stride + 5]) - int(block2[9 * stride + 5]));
    sum += pow_2(int(block1[9 * stride + 6]) - int(block2[9 * stride + 6]));
    sum += pow_2(int(block1[9 * stride + 7]) - int(block2[9 * stride + 7]));
    sum += pow_2(int(block1[9 * stride + 8]) - int(block2[9 * stride + 8]));
    sum += pow_2(int(block1[9 * stride + 9]) - int(block2[9 * stride + 9]));
    sum += pow_2(int(block1[9 * stride + 10]) - int(block2[9 * stride + 10]));
    sum += pow_2(int(block1[9 * stride + 11]) - int(block2[9 * stride + 11]));
    sum += pow_2(int(block1[9 * stride + 12]) - int(block2[9 * stride + 12]));
    sum += pow_2(int(block1[9 * stride + 13]) - int(block2[9 * stride + 13]));
    sum += pow_2(int(block1[9 * stride + 14]) - int(block2[9 * stride + 14]));
    sum += pow_2(int(block1[9 * stride + 15]) - int(block2[9 * stride + 15]));
    sum += pow_2(int(block1[10 * stride + 0]) - int(block2[10 * stride + 0]));
    sum += pow_2(int(block1[10 * stride + 1]) - int(block2[10 * stride + 1]));
    sum += pow_2(int(block1[10 * stride + 2]) - int(block2[10 * stride + 2]));
    sum += pow_2(int(block1[10 * stride + 3]) - int(block2[10 * stride + 3]));
    sum += pow_2(int(block1[10 * stride + 4]) - int(block2[10 * stride + 4]));
    sum += pow_2(int(block1[10 * stride + 5]) - int(block2[10 * stride + 5]));
    sum += pow_2(int(block1[10 * stride + 6]) - int(block2[10 * stride + 6]));
    sum += pow_2(int(block1[10 * stride + 7]) - int(block2[10 * stride + 7]));
    sum += pow_2(int(block1[10 * stride + 8]) - int(block2[10 * stride + 8]));
    sum += pow_2(int(block1[10 * stride + 9]) - int(block2[10 * stride + 9]));
    sum += pow_2(int(block1[10 * stride + 10]) - int(block2[10 * stride + 10]));
    sum += pow_2(int(block1[10 * stride + 11]) - int(block2[10 * stride + 11]));
    sum += pow_2(int(block1[10 * stride + 12]) - int(block2[10 * stride + 12]));
    sum += pow_2(int(block1[10 * stride + 13]) - int(block2[10 * stride + 13]));
    sum += pow_2(int(block1[10 * stride + 14]) - int(block2[10 * stride + 14]));
    sum += pow_2(int(block1[10 * stride + 15]) - int(block2[10 * stride + 15]));
    sum += pow_2(int(block1[11 * stride + 0]) - int(block2[11 * stride + 0]));
    sum += pow_2(int(block1[11 * stride + 1]) - int(block2[11 * stride + 1]));
    sum += pow_2(int(block1[11 * stride + 2]) - int(block2[11 * stride + 2]));
    sum += pow_2(int(block1[11 * stride + 3]) - int(block2[11 * stride + 3]));
    sum += pow_2(int(block1[11 * stride + 4]) - int(block2[11 * stride + 4]));
    sum += pow_2(int(block1[11 * stride + 5]) - int(block2[11 * stride + 5]));
    sum += pow_2(int(block1[11 * stride + 6]) - int(block2[11 * stride + 6]));
    sum += pow_2(int(block1[11 * stride + 7]) - int(block2[11 * stride + 7]));
    sum += pow_2(int(block1[11 * stride + 8]) - int(block2[11 * stride + 8]));
    sum += pow_2(int(block1[11 * stride + 9]) - int(block2[11 * stride + 9]));
    sum += pow_2(int(block1[11 * stride + 10]) - int(block2[11 * stride + 10]));
    sum += pow_2(int(block1[11 * stride + 11]) - int(block2[11 * stride + 11]));
    sum += pow_2(int(block1[11 * stride + 12]) - int(block2[11 * stride + 12]));
    sum += pow_2(int(block1[11 * stride + 13]) - int(block2[11 * stride + 13]));
    sum += pow_2(int(block1[11 * stride + 14]) - int(block2[11 * stride + 14]));
    sum += pow_2(int(block1[11 * stride + 15]) - int(block2[11 * stride + 15]));
    sum += pow_2(int(block1[12 * stride + 0]) - int(block2[12 * stride + 0]));
    sum += pow_2(int(block1[12 * stride + 1]) - int(block2[12 * stride + 1]));
    sum += pow_2(int(block1[12 * stride + 2]) - int(block2[12 * stride + 2]));
    sum += pow_2(int(block1[12 * stride + 3]) - int(block2[12 * stride + 3]));
    sum += pow_2(int(block1[12 * stride + 4]) - int(block2[12 * stride + 4]));
    sum += pow_2(int(block1[12 * stride + 5]) - int(block2[12 * stride + 5]));
    sum += pow_2(int(block1[12 * stride + 6]) - int(block2[12 * stride + 6]));
    sum += pow_2(int(block1[12 * stride + 7]) - int(block2[12 * stride + 7]));
    sum += pow_2(int(block1[12 * stride + 8]) - int(block2[12 * stride + 8]));
    sum += pow_2(int(block1[12 * stride + 9]) - int(block2[12 * stride + 9]));
    sum += pow_2(int(block1[12 * stride + 10]) - int(block2[12 * stride + 10]));
    sum += pow_2(int(block1[12 * stride + 11]) - int(block2[12 * stride + 11]));
    sum += pow_2(int(block1[12 * stride + 12]) - int(block2[12 * stride + 12]));
    sum += pow_2(int(block1[12 * stride + 13]) - int(block2[12 * stride + 13]));
    sum += pow_2(int(block1[12 * stride + 14]) - int(block2[12 * stride + 14]));
    sum += pow_2(int(block1[12 * stride + 15]) - int(block2[12 * stride + 15]));
    sum += pow_2(int(block1[13 * stride + 0]) - int(block2[13 * stride + 0]));
    sum += pow_2(int(block1[13 * stride + 1]) - int(block2[13 * stride + 1]));
    sum += pow_2(int(block1[13 * stride + 2]) - int(block2[13 * stride + 2]));
    sum += pow_2(int(block1[13 * stride + 3]) - int(block2[13 * stride + 3]));
    sum += pow_2(int(block1[13 * stride + 4]) - int(block2[13 * stride + 4]));
    sum += pow_2(int(block1[13 * stride + 5]) - int(block2[13 * stride + 5]));
    sum += pow_2(int(block1[13 * stride + 6]) - int(block2[13 * stride + 6]));
    sum += pow_2(int(block1[13 * stride + 7]) - int(block2[13 * stride + 7]));
    sum += pow_2(int(block1[13 * stride + 8]) - int(block2[13 * stride + 8]));
    sum += pow_2(int(block1[13 * stride + 9]) - int(block2[13 * stride + 9]));
    sum += pow_2(int(block1[13 * stride + 10]) - int(block2[13 * stride + 10]));
    sum += pow_2(int(block1[13 * stride + 11]) - int(block2[13 * stride + 11]));
    sum += pow_2(int(block1[13 * stride + 12]) - int(block2[13 * stride + 12]));
    sum += pow_2(int(block1[13 * stride + 13]) - int(block2[13 * stride + 13]));
    sum += pow_2(int(block1[13 * stride + 14]) - int(block2[13 * stride + 14]));
    sum += pow_2(int(block1[13 * stride + 15]) - int(block2[13 * stride + 15]));
    sum += pow_2(int(block1[14 * stride + 0]) - int(block2[14 * stride + 0]));
    sum += pow_2(int(block1[14 * stride + 1]) - int(block2[14 * stride + 1]));
    sum += pow_2(int(block1[14 * stride + 2]) - int(block2[14 * stride + 2]));
    sum += pow_2(int(block1[14 * stride + 3]) - int(block2[14 * stride + 3]));
    sum += pow_2(int(block1[14 * stride + 4]) - int(block2[14 * stride + 4]));
    sum += pow_2(int(block1[14 * stride + 5]) - int(block2[14 * stride + 5]));
    sum += pow_2(int(block1[14 * stride + 6]) - int(block2[14 * stride + 6]));
    sum += pow_2(int(block1[14 * stride + 7]) - int(block2[14 * stride + 7]));
    sum += pow_2(int(block1[14 * stride + 8]) - int(block2[14 * stride + 8]));
    sum += pow_2(int(block1[14 * stride + 9]) - int(block2[14 * stride + 9]));
    sum += pow_2(int(block1[14 * stride + 10]) - int(block2[14 * stride + 10]));
    sum += pow_2(int(block1[14 * stride + 11]) - int(block2[14 * stride + 11]));
    sum += pow_2(int(block1[14 * stride + 12]) - int(block2[14 * stride + 12]));
    sum += pow_2(int(block1[14 * stride + 13]) - int(block2[14 * stride + 13]));
    sum += pow_2(int(block1[14 * stride + 14]) - int(block2[14 * stride + 14]));
    sum += pow_2(int(block1[14 * stride + 15]) - int(block2[14 * stride + 15]));
    sum += pow_2(int(block1[15 * stride + 0]) - int(block2[15 * stride + 0]));
    sum += pow_2(int(block1[15 * stride + 1]) - int(block2[15 * stride + 1]));
    sum += pow_2(int(block1[15 * stride + 2]) - int(block2[15 * stride + 2]));
    sum += pow_2(int(block1[15 * stride + 3]) - int(block2[15 * stride + 3]));
    sum += pow_2(int(block1[15 * stride + 4]) - int(block2[15 * stride + 4]));
    sum += pow_2(int(block1[15 * stride + 5]) - int(block2[15 * stride + 5]));
    sum += pow_2(int(block1[15 * stride + 6]) - int(block2[15 * stride + 6]));
    sum += pow_2(int(block1[15 * stride + 7]) - int(block2[15 * stride + 7]));
    sum += pow_2(int(block1[15 * stride + 8]) - int(block2[15 * stride + 8]));
    sum += pow_2(int(block1[15 * stride + 9]) - int(block2[15 * stride + 9]));
    sum += pow_2(int(block1[15 * stride + 10]) - int(block2[15 * stride + 10]));
    sum += pow_2(int(block1[15 * stride + 11]) - int(block2[15 * stride + 11]));
    sum += pow_2(int(block1[15 * stride + 12]) - int(block2[15 * stride + 12]));
    sum += pow_2(int(block1[15 * stride + 13]) - int(block2[15 * stride + 13]));
    sum += pow_2(int(block1[15 * stride + 14]) - int(block2[15 * stride + 14]));
    sum += pow_2(int(block1[15 * stride + 15]) - int(block2[15 * stride + 15]));
    return sum;
};
